@page "/Traces"
@inject TelemetryResults telemetryResults
@inject TracesPageState state
@using OTLPView.DataModel;

<PageTitle>Traces</PageTitle>

<div class="OperationsList">
    <div class="OperationsListTitle">Operations:</div>
    <div class="OperationsListItems">
    @foreach (var operation in telemetryResults.Operations)
    {
        <div class="@IsSelected(operation,"OperationsListBlock")" @onclick="@(_ => SelectOperation(operation))">
            <div class="OperationsListTitleBlock">
                <h2>@operation.OperationId</h2>
                <div class="OperationsListDetails">
                    <span class="Property">Duration:</span>
                    <span class="Value">@operation.Duration ms</span>,
                    <span class="Property">Root Spans:</span>
                    <span class="Value">@operation.RootSpans.Count</span>,
                    <span class="Property">All Spans:</span>
                    <span class="Value">@operation.AllSpans.Count</span>
                </div>
                <div>
                    <span>@operation.StartTime.TimeOfDay</span>
                </div>
            </div>
        </div>
    }
    </div>
</div>
<div class="OperationBlock">
    @if (state.SelectedSpan is not null)
    {
        <div class="OperationTitleBlock">
            <h2><span>Operation:</span><span>@state.SelectedOperation.OperationId</span></h2>
        </div>
        @foreach (var s in state.SelectedOperation.RootSpans.Values)
        {
            <TraceSpanView Span="@s" />
        }
        @foreach (var s in state.SelectedOperation.UnParentedSpans)
        {
            <TraceSpanView Span="@s" />
        }

    }
    else
    {
        <div>Select an operation to view its spans</div>
    }
</div>
<div class="DetailsPanel">
    @if (state.SelectedSpan is not null)
    {
        <div class="DetailsTitle">Span Details</div>
        <div class="SpanTitle">
            <h2 class="Name">@state.SelectedSpan.Name</h2>
            <table>
                <tbody>
                    <tr>
                        <td class="Property">SpanId:</td>
                        <td class="Value">@state.SelectedSpan.SpanId</td>
                    </tr>
                    <tr>
                        <td class="Property">Kind:</td>
                        <td class="Value">@state.SelectedSpan.Kind</td>
                    </tr>
                    @if (state.SelectedSpan.ParentSpanId is not null)
                    {
                        <tr>
                            <td class="Property">Parent SpanId:</td>
                            <td class="Value">@state.SelectedSpan.ParentSpanId</td>
                        </tr>
                    }
                    @if (state.SelectedSpan.NotParented)
                    {
                        <tr>
                            <td class="Property">Validation Error</td>
                            <td class="Value">Parent span not found</td>
                        </tr>
                    }
                    <tr>
                        <td class="Property">Operation Offset:</td>
                        <td class="Value">@((state.SelectedSpan.StartTime - state.SelectedSpan.Operation.StartTime).TotalMilliseconds) ms</td>
                    </tr>
                    @if (state.SelectedSpan.ParentSpan is not null)
                    {
                        <tr>
                            <td class="Property">Parent Offset</td>

                            <td class="Value">@((state.SelectedSpan.StartTime - state.SelectedSpan.ParentSpan.StartTime).TotalMilliseconds) ms </td>
                        </tr>
                    }
                    <tr>
                        <td class="Property">Duration:</td>
                        <td class="Value">@(state.SelectedSpan.Duration.TotalMilliseconds) ms</td>
                    </tr>
                    @if (state.SelectedSpan.Status is not null)
                    {
                        <tr>
                            <td class="Property">Status:</td>
                            <td class="Value">@state.SelectedSpan.Status</td>
                        </tr>
                    }
                    @foreach (var kv in state.SelectedSpan.Attributes)
                    {
                        if (!string.IsNullOrEmpty(kv.Value))
                        {
                            <tr>
                                <td class="Property">@kv.Key:</td>
                                <td class="Value">@kv.Value</td>
                            </tr>
                        }
                    }
                    <tr>
                        <td class="DetailsTitle" colspan="2">Trace Scope</td>
                    </tr>
                    <tr>
                        <td class="Property">Name:</td>
                        <td class="Value">@state.SelectedSpan.TraceScope.ScopeName</td>
                    </tr>
                    @if (!string.IsNullOrEmpty(state.SelectedSpan.TraceScope.Version))
                    {
                        <tr>
                            <td class="Property">Version:</td>
                            <td class="Value">@state.SelectedSpan.TraceScope.Version</td>
                        </tr>
                    }
                    @foreach (var kv in state.SelectedSpan.TraceScope.Properties)
                    {
                        if (!string.IsNullOrEmpty(kv.Value))
                        {
                            <tr>
                                <td class="Property">@kv.Key:</td>
                                <td class="Value">@kv.Value</td>
                            </tr>
                        }
                    }
                    <tr>
                        <td class="DetailsTitle" colspan="2">Events</td>
                    </tr>
                    @if (state.SelectedSpan.Events.Count > 0)
                    {
                        foreach (var e in state.SelectedSpan.Events)
                        {
                            <tr>
                                <td class="Property">Name:</td>
                                <td class="Value">@e.Name</td>
                            </tr>
                            <tr>
                                <td class="Property">Offset</td>
                                <td class="Value">@e.TimeOffset(state.SelectedSpan)</td>
                            </tr>
                            foreach (var kv in e.Attributes)
                            {
                                if (!string.IsNullOrEmpty(kv.Value))
                                {
                                    <tr>
                                        <td class="Property">@kv.Key:</td>
                                        <td class="Value">@kv.Value</td>
                                    </tr>
                                }
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="2">No events</td>
                        </tr>
                    }
                    <tr>
                        <td class="DetailsTitle" colspan="2">Application</td>
                    </tr>
                    <tr>
                        <td class="Property">Name:</td>
                        <td class="Value">@state.SelectedSpan.Source.ApplicationName</td>
                    </tr>

                    @foreach (var kv in state.SelectedSpan.Source.Properties)
                    {
                        if (!string.IsNullOrEmpty(kv.Value))
                        {
                            <tr>
                                <td class="Property">@kv.Key:</td>
                                <td class="Value">@kv.Value</td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div>Select a span to see details</div>
    }
</div>
@code {

    protected override void OnInitialized()
    {
        state.SetPage(this);
        UpdateSelectedOperation();
        UpdateSelectedSpan();

    }

    public void Update()
    {
        UpdateSelectedOperation();
        UpdateSelectedSpan();
        InvokeAsync(() => StateHasChanged());
    }

    public void UpdateSelectedOperation()
    {
        if (state.SelectedOperation is null)
        {
            if (telemetryResults.Operations.Count > 0)
            {
                state.SelectedOperation = telemetryResults.Operations.First();
            }
        }
    }

    public void UpdateSelectedSpan()
    {
        if (state.SelectedSpan is null)
        {
            if (state.SelectedOperation is not null && state.SelectedOperation.RootSpans.Count > 0)
            {
                state.SelectedSpan = state.SelectedOperation.RootSpans.Values.First();
            }
        }
    }

    public void SelectOperation(TraceOperation o)
    {
        state.SelectedOperation = o;
        state.SelectedSpan = state.SelectedOperation.RootSpans.Values.First();
    }

    public string IsSelected(TraceOperation o, string cssClass) => cssClass + ((state.SelectedOperation ==o) ? " Selected" : "");

}


