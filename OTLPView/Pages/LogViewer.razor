@page "/"
@inject TelemetryResults telemetryResults
@inject LogsPageState state

<PageTitle>Logs</PageTitle>

@if (LogEntries is null or { Count: 0 })
{
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudText Typo="Typo.h6">
            No logs found
        </MudText>
        <MudText Typo="Typo.body1">
            As logs are written, they will be displayed here.
        </MudText>
    </MudPaper>
}
else
{
    <MudTable Items="@LogEntries" Dense="true" Hover="true" Striped="true" Virtualize="true"
              Filter="new Func<OtlpLogEntry, bool>(OnApplyFilter)" @bind-SelectedItem="_selectedEntry">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Log Entries</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_filter" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh><MudTableSortLabel SortBy="new Func<OtlpLogEntry, object>(x => x.Application.ShortApplicationName)">Name</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<OtlpLogEntry, object>(x => x.Severity)">Severity</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<OtlpLogEntry, object>(x => x.TimeStamp)">Timestamp</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<OtlpLogEntry, object>(x => x.OriginalFormat)">Format</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<OtlpLogEntry, object>(x => x.SpanId)">Span</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<OtlpLogEntry, object>(x => x.TraceId)">Trace Id</MudTableSortLabel></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Name">@context.Application.ShortApplicationName.HtmlEncode()</MudTd>
            <MudTd DataLabel="Severity">@context.Severity</MudTd>
            <MudTd DataLabel="Timestamp">@context.TimeStamp.ToLocalTime()</MudTd>
            <MudTd DataLabel="Format">@context.OriginalFormat</MudTd>
            <MudTd DataLabel="Span">@context.SpanId</MudTd>
            <MudTd DataLabel="Trace Id">
                <MudLink OnClick="@(() => OnFilterByTraceId(context.TraceId))" Underline="Underline.Always">
                    @context.TraceId
                </MudLink>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
@*
@if (HasLogData)
{
    @foreach (var column in telemetryResults.LogPropertyKeys.Values)
    {
        <PropertyColumn Property="@(l => l.Properties.ValueOrDefault(column,""))" Sortable="true" Title="@column" />
    }
}
*@

@code {
    List<OtlpLogEntry>? LogEntries;

    bool HasLogData => telemetryResults.Applications.Count > 0;

    private string _filter = "";
    private OtlpLogEntry _selectedEntry;

    protected override async Task OnInitializedAsync()
    {
        state.SetPage(this);

        await UpdateQuery();
    }

    public Task Update() => UpdateQuery();

    public async Task OnFilterByTraceId(string traceId)
    {
        _filter = traceId;
        await UpdateQuery();
    }

    private bool OnApplyFilter(OtlpLogEntry entry)
    {
        if (string.IsNullOrWhiteSpace(_filter))
        {
            return true;
        }

        if (entry.TraceId == _filter)
        {
            return true;
        }

        if (entry.Application.ApplicationName.Contains(_filter, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        if (entry.Message.Contains(_filter, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }

        return false;
    }

    async Task UpdateQuery()
    {
        if (telemetryResults is { Logs.Count: 0 })
        {
            LogEntries = null;
            return;
        }

        LogEntries = string.IsNullOrWhiteSpace(_filter)
            ? telemetryResults.Logs.ToList()
            : telemetryResults.Logs.Where(l => l.TraceId == _filter).ToList();

        await InvokeAsync(StateHasChanged);
    }
}
